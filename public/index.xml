<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nannannan</title>
    <link>https://3nan3.github.io/</link>
    <description>Recent content on nannannan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 20 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://3nan3.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>rubocop で ディレクトリごとにルールを変える</title>
      <link>https://3nan3.github.io/post/2020052101_rubocop_subdir/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://3nan3.github.io/post/2020052101_rubocop_subdir/</guid>
      <description>rails と rspec でアプリケーション書いてる時に度々困ることがあるんですけど、
例えば、
# app/models/user.rb def hoge fuga = cars.find_by(...) .method_a(...) .method_b(...) end # spec/models/user_spec.rb it do ecpext { user.hoge } .to change { user.reload.name }.from(&amp;quot;aaa&amp;quot;).to(&amp;quot;bbb&amp;quot;) .and change { ... } .and change { ... } end みたいな感じで書くんですよね。 で、これを rubocop さんに見てもらうと怒られちゃうんですよ。
種類としては Layout/MultilineMethodCallIndentation になるんですけど、
app は indented_relative_to_receiver に従っていて、
spec は indented に従っていることになります。
こんな感じで、ディレクトリによって rubocop のルール変えたいことがあったので、対応したときのメモになります。
対応 こうする
sample-app ├ app ├ spec │ ├ .rubocop.yml │ └ ... ├ .</description>
    </item>
    
    <item>
      <title>Slack で slash command を使って interactive なやり取りをする</title>
      <link>https://3nan3.github.io/post/2020022701_slack_bot/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://3nan3.github.io/post/2020022701_slack_bot/</guid>
      <description>ちょっと最近 bot さん使って業務を便利に出来ないかなーと思っていて、興味はあるものの一度も触ったことなかったのでいろいろ試してみたときの記録です。 先日の３連休で予定も特に無かったので（というか、コロナと花粉のせいで外に出たくなかったので）引きこもってずっと作業してました。 さくっと動作確認するつもりだったんですが、情報が古かったり（Slack APIの更新が早い？）して丸２日かかってしまい、せっかく頑張ったんだから久々に記事書くことにしました。
LT;DR GitHub の方に設定方法とか書いたのでそちら見てください。言語はGoです。
そして、ここより先の話はただの日記です 😄
https://github.com/3nan3/go-slack-interactive
はじめに いろんな記事漁ったんですけど、一番やりたいことに近かったのがメルカリさんの記事でした。 https://tech.mercari.com/entry/2017/05/23/095500
bot に話しかけると、選択肢を提示して、その結果に応じてまた返答をする、というような bot です🍺。 GitHub にレポジトリが上がっていたのでそのまま動いてくれればよかったのですが、なんかよくわからないが動かない。 そもそも Slack bot に用意されている機能がたくさんあって、初めて触る私にはどれが何できるのかよく分からなくて時間かかってしまいました。 RTM API と Event API がある、ふむなるほど。 RTM API だとメンションに反応したり、slash commandが使えたり、Event APIはえーと何？ みたいな状態で、ほとんどが情報収集と整理に時間が費やされました。
RTM API は衰退する？ Slack は今、色々変更しているタイミングのようで、レガシーと呼ばれるものが点在していました。 ２０１７年から２０１９年あたりの外部の記事を漁っていましたが、UI違ったり出来ることができなくなっていたり使わないように推奨されたり、 公式ドキュメントも、何が古くて何が新しいのかよく分からず、ずっと迷子だったような気がします。
正確な情報か自信ないんですけど、今現在新しく発行したbot用のトークンは RTM API に使えないのだとか。 slack-go レポジトリの issue にコメントがあって、 そこで紹介していた公式ドキュメントによると、
 Making API calls &amp;hellip;
New bot user API access tokens may not access RTM. For most apps, the Events API lets your app listen to Slack goings-on in a more structured, safe way.</description>
    </item>
    
    <item>
      <title>GitHub Actions で別のリポジトリに git push する</title>
      <link>https://3nan3.github.io/post/2019122201_github_actions/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://3nan3.github.io/post/2019122201_github_actions/</guid>
      <description>はじめに GitHubに新しく GitHub Actions というものがリリースされました。いつもはCircle CIを使っていたのですが、試しに使ってみようということで軽く触ってみました。
このブログは先日作ったばかりなのですが、その時に「ブログ管理用レポジトリにmargeされたら、静的ページをビルドして、ブログ公開用レポジトリにpushする」という機能をあとでやる(※)って言っていたので、これをサンプルとして作ってみようと思います。
tl;dr  push先のレポジトリで、Settingsから Deploy keys （公開鍵）を登録 GitHub Actionsを設定するレポジトリで、Settingsの Secrets にDeploy keysに対応するの秘密鍵を登録 GitHub Actions用のymlをいい感じに書いてpushする  やってみる CI的なところはだいたい何ができるか想像つくんですけど、レポジトリ間の認証どうするのかと思って調べてみましたが、特段用意されてるわけではなさそうですね、知ってました。 自分自身のレポジトリに対する認証用に GITHUB_TOKEN というものが勝手に追加される程度でした。 なので、いつも通りの認証方式を取ります。
先に、レポジトリ構成を書いておきますと、 blog が 3nan3.github.io をpublicというフォルダ名でsubmoduleとして持っています。 なので、構図としては blog レポジトリが 3nan3.github.io レポジトリにpushする形になります。
─ blog (git repogitory blog) ├── public (git submodule 3nan3.github.io) └── ... # 他いろんなファイル Deploy keys GitHub Actionsを設定する前に、先に認証周りの設定を済ませておきます。
pushされる側のレポジトリで作業を進めます。
GitHubのSettingsにある、Deploy keysを使います。 これは、ユーザに紐付かない、設定したレポジトリにのみアクセスできる鍵を作成できる機能で、読み込み専用・読み書き可能などの権限設定をすることも可能です。 今回のように、人ではないサービスなどが読み込んだり書き込んだりする時に適切な権限設定ができるのでとても便利です。 サービスの規模などに合わせてどのように管理するべきか、みたいなものが公式のページに書かれているので、悩んだことがある方にはおすすめです。
https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys
で、鍵の生成はコマンドで、
&amp;gt; ssh-keygen -t ed25519 Generating public/private ed25519 key pair.</description>
    </item>
    
    <item>
      <title>Unity で AssetBudle が更新されたかどうかを知るための Hash をいい感じにしたい</title>
      <link>https://3nan3.github.io/post/2019120701_unity_hash/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://3nan3.github.io/post/2019120701_unity_hash/</guid>
      <description>この記事は Akatsuki Advent Calendar 2019 7日目の記事です。
はじめに ゲームのシステムを作っていると、「更新があったアセットだけを検知してダウンロードする」という機能が当たり前のように必要になります。
Unityではアセットバンドルという、複数のアセットをひとまとめにする機能があり、その機能を使ってアセットの配信を行うのがスタンダードです。また、アセットバンドルをビルドする際にmanifestファイルとういものが自動で生成され、その中にHash値が保存されているので、更新されたかどうかの判定にその値を使おう、と思っていたのですがいろいろありました、というお話。
ちなみに、Unity全然わからないマンなので間違ってたら指摘入れてください。
環境 Unity 2018.3.8f1 macOS Mojave(10.14.2) 何が起きたか AssetBundleに更新が必要かどうかを判断するために、manifestのAssetFileHashを使っていました。
しかし、事件は起きました。
&amp;raquo;&amp;gt; マシンを変えるとハッシュ値が変わる &amp;laquo;&amp;lt;
えぇマジで？Hashだよ？と思いながらも調べてみると、同じことに悩んでいる方がいました。
http://sassembla.github.io/Public/2018:09:02%2010-17-07/2018:09:02%2010-17-07.html
 AssetFileHashはLibraryフォルダが共有されないと一貫性を失ってしまう
つまり
・それまで変化がなければ一定の値を保っていた
・変化があった時「のみ」変わっていた
という特性だと思っていたのが、Libraryフォルダを生成するようなことがあるとこの一貫性が破綻する。
一応、Libフォルダが生成されることがトリガーで値が変わる、というのがわかっている状態だが、
これは例えば、
「先祖代々ABを作成していたマシンが死んだ」
「新たにABを生成するマシンにプロジェクトをpullして～」
みたいなタイミングで牙を剥く。
 なるほど〜〜〜（複雑な感情が流れる）。
他にもトラップ有るかもしれないし、ちょっと動作確認してみるか、
ということで簡単なサンプル作って試してみることにしました。
 適当な画像1枚を AssetBundle ビルドする その画像を編集して AssetBundle ビルドする その画像を元と全く同じ状態に戻して AssetBundle ビルドする  すると、1.AssetBundle と 3.AssetBundle のバイト数が違う
なぜ？？？と思いながら色々調べてみましたが、同じ方の別の記事でこのような記述を発見。
http://sassembla.github.io/Public/2015:02:04%2012-47-46/2015:02:04%2012-47-46.html
 ところでAssetBundleは作り直すたびに違うサイズになる
上記でも触れたけどそういう感じ。
内容は一緒でも、作り直すたびにサイズが変化(誤差レベルだけど確実な変化)、もちろんcrcも変化する。
ただしcache後のサイズは変わらない。構成要素が一緒なんだからまあそう。
 なるほど？？？（複雑な感情が流れる）
つまりなんだ、同じマシンの中でも変わる可能性があると。
何を信じればよいのだ。。。
どうしたか 結局、調べてもこれらの要件を満たすような値を取得する方法は見つかりませんでした。
 Hash値が変わってほしい  AssetBundle の元ファイルのバイトの変化 AssetBundle の元ファイルの相対パスの変化 AssetBundle の元ファイルの、metaファイルのバイトの変化   Hash値が変わらないでほしい  AssetBundle の元ファイルのメタ情報(mtime, extended attributesなど)の変化 Unityプロジェクトを置く場所（パス、マシン、OSなど）の変化    無ければ、作るしか無い（管理するもの増えるの嫌だけど）。</description>
    </item>
    
    <item>
      <title>GitHub Pages と Hugo でブログを書く</title>
      <link>https://3nan3.github.io/post/2019112401_github_pages_and_hugo/</link>
      <pubDate>Sun, 24 Nov 2019 19:28:29 +0900</pubDate>
      
      <guid>https://3nan3.github.io/post/2019112401_github_pages_and_hugo/</guid>
      <description>はじめに 今までブログとか持ってなかったので何か欲しかったんですよね。
ブログサービスとか色々あるんですけど、GitHubに静的なページおいて公開できる機能あったことを思い出して使ってみることにしました。
今回は、そのビルドログということで記録を残しておきます。
ブログなので文量多めです。
GitHub Pages とは 簡単に言うと、GitHubに &amp;lt;username&amp;gt;.github.io という名前のレポジトリを作ると、Webページとして公開してくれるサービスです。 構成とかデプロイとか何にも考えなくて良いので楽ちん。
https://help.github.com/ja/github/working-with-github-pages
商用利用禁止であったり、アクセス数の制限があったり、その辺りの細かいことは公式の利用規約などをご確認ください。
Hugo とは markdownから静的ページを生成するツールです。
https://gohugo.io/
Hugoを選んだ理由は、markdownで書けるというのが一番の理由で、他はテーマが種類が豊富にありそうだったとか、Go製なので軽量＆速そうとか、そういう理由です。
構成 要は公開したいファイルを &amp;lt;username&amp;gt;.github.io レポジトリに入れていけばいいんですが、せっかく作るので管理しやすい形にしたいです。
Hugo自体のファイルや生成元のmarkdownを管理するレポジトリと、公開用のレポジトリ &amp;lt;username&amp;gt;.github.io と、２つ用意するのはどうかな、と考えていたところ同じような構成を紹介しているサイトを発見。
https://www.ted027.com/post/hugo/#hugo
（本当にこのサイトのまま作ったので、紹介したら終わりになってしまうのですが）
以下のような構成で構築を進めます。
─ blog (git repogitory) ├── public (git submodule &amp;lt;username.github.io&amp;gt;) ├── content # ブログ記事 │　└── post │　├── 2019112401_github_pages_and_hugo.md │　├── 2019112501_other_post.md │　: ├── themas # 選択したテーマ ├── archetypes # 新しく記事を作ったときのテンプレート置き場 └── config.toml # 設定ファイル 導入 動作環境
Ubuntu 18.04 LTS Hugo のセットアップ aptとかでインストールしてもいいんですが、最新版をいつでも使えるようにここではGitHubから取得する方法にします。</description>
    </item>
    
  </channel>
</rss>